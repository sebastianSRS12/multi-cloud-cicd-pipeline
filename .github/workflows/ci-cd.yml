name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  validate:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Decide validation mode
      id: gate
      run: |
        if [ -n "${{ secrets.AWS_ROLE_TO_ASSUME }}" ]; then
          echo "run_tf=true" >> $GITHUB_OUTPUT
        else
          echo "run_tf=false" >> $GITHUB_OUTPUT
        fi

    - name: Set up Terraform
      if: steps.gate.outputs.run_tf == 'true'
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.5.0"

    - name: Configure AWS Credentials (OIDC)
      if: steps.gate.outputs.run_tf == 'true'
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
        audience: sts.amazonaws.com
        output-env-credentials: true
        aws-region: us-east-1

    - name: Terraform Init
      if: steps.gate.outputs.run_tf == 'true'
      run: |
        cd terraform
        terraform init \
          -backend-config="bucket=multi-cloud-terraform-state" \
          -backend-config="key=multi-cloud/terraform.tfstate" \
          -backend-config="region=us-east-1" \
          -backend-config="encrypt=true" \
          -backend-config="dynamodb_table=terraform-locks"

    - name: Terraform Validate
      if: steps.gate.outputs.run_tf == 'true'
      run: |
        cd terraform
        terraform validate

    - name: Terraform Plan
      if: steps.gate.outputs.run_tf == 'true'
      run: |
        cd terraform
        terraform plan -no-color

    - name: Skip validation (no AWS OIDC role configured)
      if: steps.gate.outputs.run_tf != 'true'
      run: |
        echo "Skipping Terraform validation - AWS_ROLE_TO_ASSUME not configured"
        echo "Add AWS_ROLE_TO_ASSUME and AWS_REGION (or hardcode region in workflow) to enable Terraform validation"

  build-and-test:
    runs-on: ubuntu-latest
    needs: validate

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker
      run: |
        docker --version

    - name: Build Docker image
      run: |
        cd app
        docker build -t multi-cloud-app:test .

    - name: Test Docker container
      run: |
        cd app
        docker run -d --name test-app -p 5000:5000 multi-cloud-app:test
        sleep 10
        curl -f http://localhost:5000/health
        docker stop test-app
        docker rm test-app

  deploy:
    runs-on: ubuntu-latest
    needs: [validate, build-and-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Decide deploy mode
      id: deploy_gate
      run: |
        if [ -n "${{ secrets.AWS_ROLE_TO_ASSUME }}" ] && [ -n "${{ secrets.AWS_ACCOUNT_ID }}" ]; then
          echo "run_deploy=true" >> $GITHUB_OUTPUT
        else
          echo "run_deploy=false" >> $GITHUB_OUTPUT
        fi

    - name: Configure AWS Credentials (OIDC)
      if: steps.deploy_gate.outputs.run_deploy == 'true'
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
        audience: sts.amazonaws.com
        output-env-credentials: true
        aws-region: us-east-1

    - name: Build and push Docker images
      if: steps.deploy_gate.outputs.run_deploy == 'true'
      run: |
        # Login to AWS ECR using OIDC credentials
        aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com

        # Build and push (simplified - add other registries)
        cd app
        docker build -t multi-cloud-app:latest .
        docker tag multi-cloud-app:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/multi-cloud-app:latest
        docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/multi-cloud-app:latest

    - name: Skip deploy (no AWS OIDC role / account configured)
      if: steps.deploy_gate.outputs.run_deploy != 'true'
      run: |
        echo "Skipping deploy - missing AWS_ROLE_TO_ASSUME and/or AWS_ACCOUNT_ID secrets"